1. Подход к расширяемости
    1.	Добавление новых связей
    o	Новые связи можно добавлять в JSON-файл, следуя существующему формату.
    o	Для добавления потребуется лишь описание связи в виде комбинации родственных уровней, таких как LIK(M)/ELDRE(W).
    o	Программа должна быть спроектирована так, чтобы при обновлении JSON-файла автоматически учитывать новые связи без изменения логики обработки.
    2.	Редактирование существующих связей
    o	Можно изменить определения родственных отношений, уточняя или добавляя новые комбинации.
    o	Например, если потребуется уточнение термина "Сноха", можно обновить существующую запись без влияния на другие части системы.
    3.	Гибкая система поиска
    o	Поиск связей строится на основе анализа цепочек родства, описанных в JSON.
    o	Программа должна уметь интерпретировать новые связи по заданным шаблонам.
________________________________________
2. Расшифровка формата JSON и интерпретация
    Каждый тип родства в JSON представлен через комбинации сокращений:
    •	Типы людей:
    o	LIK(M) — супруг (LIK = партнер, M = мужской пол).
    o	LIK(W) — супруга (W = женский пол).
    o	UNG(M) — сын (UNG = младшее поколение, M = мужской пол).
    o	ELDRE(W) — мать (ELDRE = старшее поколение, W = женский пол).
    •	Комбинации:
    o	/ — обозначает родственную связь. Например, LIK(W)/ELDRE(M) означает «тесть» (мужчина из старшего поколения супруги).
    o	&& — альтернативные пути, например, «внук» может быть как по отцовской, так и по материнской линии.
    Примеры интерпретации:
    •	"Сноха": "UNG(M)/LIK(W)" — жена сына (невестка).
    •	"Тёща": "LIK(W)/ELDRE(W)" — мать супруги.
    •	"Дедушка": "ELDRE(W)/ELDRE(M)&&ELDRE(M)/ELDRE(M)" — возможны два варианта дедушки (по линии отца и по линии матери).
________________________________________
3. Добавление новых родственных связей
Добавление новых типов родства требует:
    1.	Определения шаблона для новой связи.
    o	Например, если необходимо добавить понятие "Кузен" (двоюродный брат), оно может быть представлено как:
    "Кузен": "ELDRE(M)/UNG(M)/UNG(M)"
    o	Здесь:
    	ELDRE(M) — отец,
    	UNG(M) — его ребёнок,
    	UNG(M) — сын его брата (двоюродный брат).
    2.	Обновления JSON-файла с новыми значениями.
    3.	Автоматического распознавания программы новых связей без необходимости обновления кода.
    Пример новых записей:
    {
      "Кузен": "ELDRE(M)/UNG(M)/UNG(M)",
      "Троюродный брат": "ELDRE(M)/ELDRE(M)/UNG(M)/UNG(M)",
      "Пасынок": "LIK(W)/UNG(M)",
      "Падчерица": "LIK(W)/UNG(W)"
    }
    ________________________________________
    4. Масштабируемость системы
    Для того чтобы обеспечить удобное расширение и поддержку системы, важно учитывать:
        1.	Разделение логики обработки:
        o	JSON-файл должен хранить только правила и структуру связей, а интерпретация должна выполняться отдельным модулем.
        o	Это позволяет легко обновлять данные и расширять функциональность.
        2.	Гибкость обработки данных:
        o	Использование рекурсивного алгоритма для поиска связей по JSON.
        o	Возможность добавления пользовательских правил через интерфейс.
        3.	Локализация терминов:
        o	Связи могут быть представлены на разных языках, например, добавить вариант "Brother-in-law" для "Шурин".
        o	Для этого можно организовать словарь терминов, например:
        {
          "Шурин": { "en": "Brother-in-law"}
        }
________________________________________
Вывод
Использование JSON для хранения родственных связей обеспечивает:
•	Гибкость и лёгкость обновления, позволяя без изменения кода добавлять новые виды отношений.
•	Простоту масштабирования, так как система адаптируется к новым данным автоматически.
•	Поддержку многозначных связей, таких как альтернативные пути родства (&&).
Такой подход делает систему удобной для дальнейшего развития и локализации.



